<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Li Tech Blog</title>
    <description>New features have been adding, old features had been removing, developers are changing, finally we found the market fit, and started to worry about code quality.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 20 Jul 2017 16:57:09 -0400</pubDate>
    <lastBuildDate>Thu, 20 Jul 2017 16:57:09 -0400</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Problems</title>
        <description>&lt;h4 id=&quot;whats-the-problem&quot;&gt;What’s the problem?&lt;/h4&gt;

&lt;p&gt;[Chumi] is an attendees-focused event hosting platform, it has payment, instant messaging, and circles feed features. Due to the product is pivoting a lot of times, it leaves unneccesary code and structures. Every time when developers need to fix bugs or add new features, it takes a lot of time to check the code and easily causes more issues.&lt;/p&gt;

&lt;h4 id=&quot;technical-problems&quot;&gt;technical problems&lt;/h4&gt;

&lt;p&gt;1.ARC
2.Wrong struc, enum, class usages
3.Unnecessary force unwrapping model properties
4.Lack of proper memory management considerations while doing network calls within 5.view controllers
6.Some bad coding design
7.Lack of tests
…&lt;/p&gt;

&lt;h4 id=&quot;what-causes-those-issues&quot;&gt;What causes those issues?&lt;/h4&gt;

&lt;p&gt;TDD is not excueted. No code review. Tight schedule. Too many part-time developers. Lack of coding style guide.&lt;/p&gt;

&lt;h4 id=&quot;what-would-i-do&quot;&gt;What would I do?&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Draw a diagram and write a doc for all kinds of files.&lt;/li&gt;
  &lt;li&gt;follow mvvm, work on model by model.&lt;/li&gt;
  &lt;li&gt;Work on view-model.&lt;/li&gt;
  &lt;li&gt;Work on view controllers.&lt;/li&gt;
  &lt;li&gt;Write a coding style guide.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;license&quot;&gt;License&lt;/h4&gt;

&lt;p&gt;Great thanks to &lt;a href=&quot;https://github.com/daleanthony&quot;&gt;Dale Anthony&lt;/a&gt; and his &lt;a href=&quot;https://github.com/daleanthony/uno&quot;&gt;Uno&lt;/a&gt;. Vno Jekyll is based on Uno, and contains a lot of modification on page layout, animation, font and some more things I can not remember. Vno Jekyll is followed with Uno and be licensed as &lt;a href=&quot;http://creativecommons.org/licenses/by/4.0/&quot;&gt;Creative Commons Attribution 4.0 International&lt;/a&gt;. See the link for more information.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Jul 2017 02:32:24 -0400</pubDate>
        <link>http://localhost:4000/2017/07/Problems/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/Problems/</guid>
        
        
      </item>
    
      <item>
        <title>API-Model</title>
        <description>&lt;h4 id=&quot;whats-the-problem&quot;&gt;What’s the problem?&lt;/h4&gt;

&lt;p&gt;API is hard code on Alamofire requests, or global. It’s hard to edit on one place.&lt;/p&gt;

&lt;p&gt;####&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We use struct to build this model, becasue struct make it unique, and we dont need to inherent the code, it only returns different apis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We use enum inside the struct, so we use the switch func to easily return the specific apis, each enum is a router&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//
//  ChumiApiClient.swift
//  chumie
//
//  Created by Yitao Li on 2017-07-20.
//  Copyright © 2017 Yitao Li. All rights reserved.
//

import Foundation
import Alamofire

struct ChumiApiClient {

static let hostURL = &quot;http://example.cloudfront.net&quot;
static let imgHostURL = &quot;http://example.cloudfront.net&quot;

//member relevant router
enum Member: URLRequestConvertible {

    case login()
    case checkEmailDuplicate()
    case register()
    case registerWithFacebook()

    func asURLRequest() throws -&amp;gt; URLRequest {

    var path = &quot;/member&quot;
    let parameters: [String: Any] = [:]

    switch self {

    case .checkEmailDuplicate():
    path = path + &quot;/checkEmail&quot;
    break

    case .login():
    path = path + &quot;/login&quot;
    break

    case .register():
    path = path + &quot;/reg&quot;
    break

    case .registerWithFacebook():
    path = path + &quot;/registerFromFacebook&quot;
    break

    }




    let destinationURL = URL(string: ChumiApiClient.hostURL)
    let destinationURLRequest = URLRequest(url: destinationURL!.appendingPathComponent(path))
    let encoding = URLEncoding.default

    return try encoding.encode(destinationURLRequest, with: parameters)
    }
}

//Activity relevant router
enum Activity {
    ....
}

}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 20 Jul 2017 02:32:24 -0400</pubDate>
        <link>http://localhost:4000/2017/07/API-model/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/API-model/</guid>
        
        
      </item>
    
  </channel>
</rss>
